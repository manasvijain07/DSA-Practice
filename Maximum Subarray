Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Example 2:

Input: nums = [1]
Output: 1
Example 3:

Input: nums = [5,4,-1,7,8]
Output: 23
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104

------------------------------------------------------------

Solution 1 - sliding window - TC - O(n) SC - O(1)

    public int maxSubArray(int[] nums) {
        int max = Integer.MIN_VALUE, csum = 0;
        
        int end = 0;
        
        while(end < nums.length)
        {
            csum = Math.max(csum + nums[end], nums[end]);
            max = Math.max(csum, max);
            end++;
        }
        
        max = Math.max(max, csum);
        return max;
    }
