Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 

Example 1:

Input: nums = [3,2,3]
Output: 3
Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2
 

Constraints:

n == nums.length
1 <= n <= 5 * 104
-109 <= nums[i] <= 109
 

Follow-up: Could you solve the problem in linear time and in O(1) space?

--------------------------------------------------------

Solution 1 - Using hashMap - TC - O(n) SC - O(n)

public int majorityElement(int[] nums) {
        HashMap<Integer, Integer> map = new HashMap<>();
        
        for(int i: nums)
        {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }
        
        for(int i : nums)
        {
            if(map.get(i) > Math.floor(nums.length / 2))
            {
                return i;
            }
        }
        return -1;
    }
    
 ---------------------------------------------------------
 
 Solution 2 - Moore's voting algo - TC - O(n) SC - O(1) 
 // https://www.youtube.com/watch?v=NgLeC7DeWn4
 
 
 public int majorityElement(int[] nums) {
        // first step = find majority element
        // conside res = first element as majority and proceed accordingly. Loop through array, take its count, if its same do count++ end count--, if count == 0 set res to that index
        
        int res = 0, count = 1;
        
        for(int i = 1; i < nums.length; i++)
        {
            if(nums[res] == nums[i])
            {
                count++;
            }
            else
            {
                count--;
            }
            
            if(count == 0)
            {
                count = 1;
                res = i;
            }
        }
        
        // sec step = does majority element appears more than n/2 times
        // I already got majority element, we check its count and see if it is more than n/2 times
        count = 0;
        for(int i = 0; i < nums.length; i++)
        {
            if(nums[res] == nums[i])
            {
                count++;
            }
        }
        
        return (count > nums.length/ 2) ? nums[res]: -1;
    }
