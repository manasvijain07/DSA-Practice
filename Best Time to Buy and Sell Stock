You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

 

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.
Example 2:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.
 

Constraints:

1 <= prices.length <= 105
0 <= prices[i] <= 104

--------------------------------------------------

Video - https://www.youtube.com/watch?v=34WE6kwq49U

Solution 1 - Broute force - TC - O(n ^ 2) SC - O(1) --> Time limit exceeded

 public int maxProfit(int[] nums) {
        
        int max = 0;
        
        for(int i = 0; i < nums.length; i++)
        {
            for(int j = i + 1; j < nums.length; j++)
            {
                max = Math.max(max, nums[j] - nums[i]);
            }
        }
        return max;
    }
    
  --------------------------------------------------------------
  
  Solution 2 - Taking auxilary space to store max on right - TC - O(n) SC - O(n)
  
  public int maxProfit(int[] nums) {
        int [] aux = new int[nums.length];
        
        int max_on_right = 0;
        
        for(int i = nums.length - 1; i >= 0; i--)
        {
            if(max_on_right < nums[i])
            {
                max_on_right = nums[i];
            }
            aux[i] = max_on_right;
        }
        
        int max_profit = 0;
        
        for(int i = 0; i < nums.length; i++)
        {
            max_profit = Math.max(max_profit, aux[i] - nums[i]);
        }
        return max_profit;
    }
    
  ---------------------------------------------------------
  
  Solution 3 - TC - O(n) SC - O(1)
  
      public int maxProfit(int[] nums) {
        int min_so_far = nums[0], max = 0;
        
        for(int i = 0; i < nums.length; i++)
        {
            min_so_far = Math.min(nums[i], min_so_far);
            max = Math.max(max, nums[i] - min_so_far);
        }
        return max;
    }
  
  
  
  
